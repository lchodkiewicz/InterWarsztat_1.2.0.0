
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DefaultConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=enzo_MiniCrm;User ID=enzo_MiniCrm;Password=zaq123`
//     Schema:                 ``
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace EnzoMiniCrm.Model
{
	public partial class EnzoMiniCrmDB : Database
	{
		public EnzoMiniCrmDB() 
			: base("DefaultConnection")
		{
			CommonConstruct();
		}

		public EnzoMiniCrmDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			EnzoMiniCrmDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static EnzoMiniCrmDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new EnzoMiniCrmDB();
        }

		[ThreadStatic] static EnzoMiniCrmDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static EnzoMiniCrmDB repo { get { return EnzoMiniCrmDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("Employees")]
	[PrimaryKey("EmployeeID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Employee : EnzoMiniCrmDB.Record<Employee>  
    {
		[Column] public string EmployeeID { get; set; }
		[Column] public string LastName { get; set; }
		[Column] public string FirstName { get; set; }
		[Column] public DateTime? BirthDate { get; set; }
		[Column] public DateTime? HireDate { get; set; }
		[Column] public string Address { get; set; }
		[Column] public string City { get; set; }
		[Column] public string Region { get; set; }
		[Column] public string PostalCode { get; set; }
		[Column] public string Country { get; set; }
		[Column] public string HomePhone { get; set; }
		[Column] public string Extension { get; set; }
		[Column] public string Notes { get; set; }
		[Column] public string ReportsTo { get; set; }
		[Column] public string PhotoPath { get; set; }
	}
    
	[TableName("AspNetRoles")]
	[PrimaryKey("Id", autoIncrement=false)]
	[ExplicitColumns]
    public partial class AspNetRole : EnzoMiniCrmDB.Record<AspNetRole>  
    {
		[Column] public string Id { get; set; }
		[Column] public string Name { get; set; }
	}
    
	[TableName("AspNetUserRoles")]
	[PrimaryKey("UserId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class AspNetUserRole : EnzoMiniCrmDB.Record<AspNetUserRole>  
    {
		[Column] public string UserId { get; set; }
		[Column] public string RoleId { get; set; }
	}
    
	[TableName("AspNetUsers")]
	[PrimaryKey("Id", autoIncrement=false)]
	[ExplicitColumns]
    public partial class AspNetUser : EnzoMiniCrmDB.Record<AspNetUser>  
    {
		[Column] public string Id { get; set; }
		[Column] public string Email { get; set; }
		[Column] public bool EmailConfirmed { get; set; }
		[Column] public string PasswordHash { get; set; }
		[Column] public string SecurityStamp { get; set; }
		[Column] public string PhoneNumber { get; set; }
		[Column] public bool PhoneNumberConfirmed { get; set; }
		[Column] public bool TwoFactorEnabled { get; set; }
		[Column] public DateTime? LockoutEndDateUtc { get; set; }
		[Column] public bool LockoutEnabled { get; set; }
		[Column] public int AccessFailedCount { get; set; }
		[Column] public string UserName { get; set; }
	}
    
	[TableName("AspNetUserClaims")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class AspNetUserClaim : EnzoMiniCrmDB.Record<AspNetUserClaim>  
    {
		[Column] public int Id { get; set; }
		[Column] public string UserId { get; set; }
		[Column] public string ClaimType { get; set; }
		[Column] public string ClaimValue { get; set; }
	}
    
	[TableName("AspNetUserLogins")]
	[PrimaryKey("LoginProvider", autoIncrement=false)]
	[ExplicitColumns]
    public partial class AspNetUserLogin : EnzoMiniCrmDB.Record<AspNetUserLogin>  
    {
		[Column] public string LoginProvider { get; set; }
		[Column] public string ProviderKey { get; set; }
		[Column] public string UserId { get; set; }
	}
    
	[TableName("__MigrationHistory")]
	[PrimaryKey("MigrationId", autoIncrement=false)]
	[ExplicitColumns]
    public partial class __MigrationHistory : EnzoMiniCrmDB.Record<__MigrationHistory>  
    {
		[Column] public string MigrationId { get; set; }
		[Column] public string ContextKey { get; set; }
		[Column] public byte[] Model { get; set; }
		[Column] public string ProductVersion { get; set; }
	}
    
	[TableName("sysdiagrams")]
	[PrimaryKey("diagram_id")]
	[ExplicitColumns]
    public partial class sysdiagram : EnzoMiniCrmDB.Record<sysdiagram>  
    {
		[Column] public string name { get; set; }
		[Column] public int principal_id { get; set; }
		[Column] public int diagram_id { get; set; }
		[Column] public int? version { get; set; }
		[Column] public byte[] definition { get; set; }
	}
    
	[TableName("OilChanges")]
	[PrimaryKey("OilChangeID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class OilChange : EnzoMiniCrmDB.Record<OilChange>  
    {
		[Column] public long OilChangeID { get; set; }
		[Column] public string CustomerID { get; set; }
		[Column] public string EmployeeID { get; set; }
		[Column] public string DateOfChange { get; set; }
		[Column] public string Kilometer { get; set; }
		[Column] public string NextDateOfChange { get; set; }
		[Column] public long? FactureID { get; set; }
		[Column] public decimal? Price { get; set; }
	}
    
	[TableName("RepairsStatus")]
	[PrimaryKey("RepairStatusID")]
	[ExplicitColumns]
    public partial class RepairsStatus : EnzoMiniCrmDB.Record<RepairsStatus>  
    {
		[Column] public long RepairStatusID { get; set; }
		[Column] public long? RepairID { get; set; }
		[Column] public string CustomerID { get; set; }
		[Column] public string EmployeeID { get; set; }
		[Column] public string VehicleID { get; set; }
		[Column] public DateTime? DateOfChange { get; set; }
		[Column] public string Status { get; set; }
		[Column] public string DescribeRepair { get; set; }
		[Column] public string Permission { get; set; }
	}
    
	[TableName("Vehicles")]
	[PrimaryKey("VehicleID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Vehicle : EnzoMiniCrmDB.Record<Vehicle>  
    {
		[Column] public string VehicleID { get; set; }
		[Column] public string CustomerID { get; set; }
		[Column] public string Make { get; set; }
		[Column] public string Model { get; set; }
		[Column] public string FuelType { get; set; }
		[Column] public DateTime? DateOfManufacture { get; set; }
		[Column] public DateTime? FirstRegistration { get; set; }
		[Column] public int? Power { get; set; }
		[Column] public long? LastChangeOilID { get; set; }
		[Column] public long? LastKilometerID { get; set; }
		[Column] public string RegistrationNumber { get; set; }
	}
    
	[TableName("Customers")]
	[PrimaryKey("CustomerID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class Customer : EnzoMiniCrmDB.Record<Customer>  
    {
		[Column] public string CustomerID { get; set; }
		[Column] public string FirstName { get; set; }
		[Column] public string LastName { get; set; }
		[Column] public string ContactTitle { get; set; }
		[Column] public string Address { get; set; }
		[Column] public string City { get; set; }
		[Column] public string Region { get; set; }
		[Column] public string PostalCode { get; set; }
		[Column] public string Country { get; set; }
		[Column] public string Phone { get; set; }
		[Column] public string Fax { get; set; }
	}
    
	[TableName("Repairs")]
	[PrimaryKey("RepairID")]
	[ExplicitColumns]
    public partial class Repair : EnzoMiniCrmDB.Record<Repair>  
    {
		[Column] public long RepairID { get; set; }
		[Column] public string CustomerID { get; set; }
		[Column] public string EmployeeID { get; set; }
		[Column] public string VehicleID { get; set; }
		[Column] public string DateOfRepair { get; set; }
		[Column] public string Kilometer { get; set; }
		[Column] public string DescribeProblem { get; set; }
		[Column] public string Status { get; set; }
		[Column] public string DescribeRepair { get; set; }
		[Column] public long? FactureID { get; set; }
		[Column] public decimal? Price { get; set; }
	}
    
	[TableName("Mails")]
	[PrimaryKey("MailID")]
	[ExplicitColumns]
    public partial class Mail : EnzoMiniCrmDB.Record<Mail>  
    {
		[Column] public long MailID { get; set; }
		[Column] public string CustomerID { get; set; }
		[Column] public string From { get; set; }
		[Column] public string Subject { get; set; }
		[Column] public string Body { get; set; }
		[Column] public DateTime? SendingDate { get; set; }
		[Column] public string Annex1 { get; set; }
		[Column] public string Annex2 { get; set; }
		[Column] public string Annex3 { get; set; }
		[Column] public string Status { get; set; }
		[Column] public string ErrorRaport { get; set; }
	}
}


